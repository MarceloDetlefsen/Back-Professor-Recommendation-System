"""
Script para inicializar la base de datos Neo4j con datos de prueba
para el sistema de recomendaci√≥n de profesores
"""

import sys
from src.database.neo4jdriver import Neo4jDriver
from src.models.estudiante import Estudiante
from src.models.profesor import Profesor
from src.models.curso import Curso
import os

def limpiar_base_datos():
    """Elimina todos los nodos y relaciones de la base de datos"""
    driver = Neo4jDriver()
    driver.execute_write("MATCH (n) DETACH DELETE n")
    print("Base de datos limpiada correctamente")

def crear_restricciones():
    """Crea las restricciones de unicidad en la base de datos"""
    driver = Neo4jDriver()
    
    # Verificar si las restricciones ya existen
    constraints = driver.execute_read("SHOW CONSTRAINTS")
    
    if not any("estudiante_nombre" in str(c).lower() for c in constraints):
        driver.execute_write("CREATE CONSTRAINT estudiante_nombre IF NOT EXISTS FOR (e:Estudiante) REQUIRE e.nombre IS UNIQUE")
    
    if not any("profesor_nombre" in str(c).lower() for c in constraints):
        driver.execute_write("CREATE CONSTRAINT profesor_nombre IF NOT EXISTS FOR (p:Profesor) REQUIRE p.nombre IS UNIQUE")
    
    if not any("curso_codigo" in str(c).lower() for c in constraints):
        driver.execute_write("CREATE CONSTRAINT curso_codigo IF NOT EXISTS FOR (c:Curso) REQUIRE c.codigo IS UNIQUE")
    
    print("Restricciones creadas correctamente")

def crear_cursos():
    """Crea cursos de ejemplo en la base de datos"""
    driver = Neo4jDriver()
    
    cursos = [
        Curso(nombre="C√°lculo 1", codigo="MAT103", departamento="Matem√°ticas", creditos=4),
        Curso(nombre="F√≠sica General", codigo="FIS101", departamento="F√≠sica", creditos=5),
        Curso(nombre="Programaci√≥n B√°sica", codigo="INF110", departamento="Inform√°tica", creditos=3),
        Curso(nombre="Estad√≠stica", codigo="EST201", departamento="Matem√°ticas", creditos=3),
        Curso(nombre="Bases de Datos", codigo="INF210", departamento="Inform√°tica", creditos=4)
    ]
    
    for curso in cursos:
        query = """
        MERGE (c:Curso {
            nombre: $nombre,
            codigo: $codigo,
            departamento: $departamento,
            creditos: $creditos
        })
        RETURN c
        """
        
        driver.execute_write(
            query,
            nombre=curso.nombre,
            codigo=curso.codigo,
            departamento=curso.departamento,
            creditos=curso.creditos
        )
    
    print(f"Se han creado {len(cursos)} cursos de ejemplo")

def crear_estudiantes():
    """Crea estudiantes de ejemplo en la base de datos"""
    estudiantes = [
        Estudiante(nombre="Juan P√©rez", estilo_aprendizaje="visual", estilo_clase="presencial", promedio=85, asistencias=4, veces_curso=1),
        Estudiante(nombre="Mar√≠a L√≥pez", estilo_aprendizaje="te√≥rico", estilo_clase="virtual", promedio=92, asistencias=5, veces_curso=1),
        Estudiante(nombre="Carlos Rodr√≠guez", estilo_aprendizaje="pr√°ctico", estilo_clase="presencial", promedio=78, asistencias=3, veces_curso=2),
        Estudiante(nombre="Ana Mart√≠nez", estilo_aprendizaje="visual", estilo_clase="virtual", promedio=88, asistencias=4, veces_curso=1),
        Estudiante(nombre="Pedro G√≥mez", estilo_aprendizaje="te√≥rico", estilo_clase="presencial", promedio=75, asistencias=2, veces_curso=3)
    ]
    
    for estudiante in estudiantes:
        estudiante.calcular_puntuacion()
        
        query = """
        MERGE (e:Estudiante {
            nombre: $nombre,
            estilo_aprendizaje: $estilo_aprendizaje,
            estilo_clase: $estilo_clase,
            promedio: $promedio,
            asistencias_curso_anterior: $asistencias,
            veces_que_llevo_curso: $veces_curso,
            puntuacion_total: $puntuacion_total
        })
        RETURN e
        """
        
        driver = Neo4jDriver()
        driver.execute_write(
            query,
            nombre=estudiante.nombre,
            estilo_aprendizaje=estudiante.estilo_aprendizaje,
            estilo_clase=estudiante.estilo_clase,
            promedio=estudiante.promedio,
            asistencias=estudiante.asistencias,
            veces_curso=estudiante.veces_curso,
            puntuacion_total=estudiante.puntuacion_total
        )
    
    print(f"Se han creado {len(estudiantes)} estudiantes de ejemplo")

def crear_profesores():
    """Crea profesores de ejemplo en la base de datos"""
    profesores = [
        Profesor(nombre="Dr. Mart√≠nez", estilo_ense√±anza="visual", estilo_clase="presencial", a√±os_experiencia=10, evaluacion_docente=4.5, porcentaje_aprobados=85, disponibilidad=4),
        Profesor(nombre="Dra. Gonz√°lez", estilo_ense√±anza="te√≥rico", estilo_clase="virtual", a√±os_experiencia=15, evaluacion_docente=4.8, porcentaje_aprobados=90, disponibilidad=3),
        Profesor(nombre="Prof. S√°nchez", estilo_ense√±anza="pr√°ctico", estilo_clase="presencial", a√±os_experiencia=8, evaluacion_docente=4.2, porcentaje_aprobados=78, disponibilidad=5),
        Profesor(nombre="Dra. Ram√≠rez", estilo_ense√±anza="visual", estilo_clase="virtual", a√±os_experiencia=12, evaluacion_docente=4.6, porcentaje_aprobados=88, disponibilidad=4),
        Profesor(nombre="Dr. Torres", estilo_ense√±anza="te√≥rico", estilo_clase="presencial", a√±os_experiencia=20, evaluacion_docente=4.9, porcentaje_aprobados=92, disponibilidad=2)
    ]
    
    for profesor in profesores:
        profesor.calcular_puntuacion()
        
        query = """
        MERGE (p:Profesor {
            nombre: $nombre,
            estilo_ense√±anza: $estilo_ense√±anza,
            estilo_clase: $estilo_clase,
            a√±os_experiencia: $a√±os_experiencia,
            evaluacion_docente: $evaluacion_docente,
            porcentaje_aprobados: $porcentaje_aprobados,
            disponibilidad: $disponibilidad,
            puntuacion_total: $puntuacion_total
        })
        RETURN p
        """
        
        driver = Neo4jDriver()
        driver.execute_write(
            query,
            nombre=profesor.nombre,
            estilo_ense√±anza=profesor.estilo_ense√±anza,
            estilo_clase=profesor.estilo_clase,
            a√±os_experiencia=profesor.a√±os_experiencia,
            evaluacion_docente=profesor.evaluacion_docente,
            porcentaje_aprobados=profesor.porcentaje_aprobados,
            disponibilidad=profesor.disponibilidad,
            puntuacion_total=profesor.puntuacion_total
        )
    
    print(f"Se han creado {len(profesores)} profesores de ejemplo")

def crear_relaciones():
    """Crea relaciones entre estudiantes, profesores y cursos"""
    driver = Neo4jDriver()
    
    # Relaciones entre profesores y cursos
    relaciones_profesor_curso = [
        ("Dr. Mart√≠nez", "MAT103"),
        ("Dra. Gonz√°lez", "FIS101"),
        ("Prof. S√°nchez", "INF110"),
        ("Dra. Ram√≠rez", "EST201"),
        ("Dr. Torres", "INF210"),
        ("Dr. Mart√≠nez", "EST201"),
        ("Dra. Gonz√°lez", "MAT103")
    ]
    
    for profesor, curso in relaciones_profesor_curso:
        driver.execute_write(
            """
            MATCH (p:Profesor {nombre: $nombre_profesor})
            MATCH (c:Curso {codigo: $codigo_curso})
            MERGE (p)-[r:IMPARTE]->(c)
            RETURN p, r, c
            """,
            nombre_profesor=profesor,
            codigo_curso=curso
        )
    
    # Relaciones de aprobaci√≥n entre estudiantes y cursos
    aprobaciones = [
        ("Juan P√©rez", "MAT103", "Dr. Mart√≠nez"),
        ("Mar√≠a L√≥pez", "FIS101", "Dra. Gonz√°lez"),
        ("Carlos Rodr√≠guez", "INF110", "Prof. S√°nchez"),
        ("Ana Mart√≠nez", "EST201", "Dra. Ram√≠rez"),
        ("Pedro G√≥mez", "INF210", "Dr. Torres"),
        ("Juan P√©rez", "EST201", "Dr. Mart√≠nez"),
        ("Mar√≠a L√≥pez", "MAT103", "Dra. Gonz√°lez")
    ]
    
    for estudiante, curso, profesor in aprobaciones:
        driver.execute_write(
            """
            MATCH (e:Estudiante {nombre: $nombre_estudiante})
            MATCH (p:Profesor {nombre: $nombre_profesor})
            MATCH (c:Curso {codigo: $codigo_curso})
            MERGE (e)-[r:APROB√ì_CON]->(c)
            RETURN e, r, c
            """,
            nombre_estudiante=estudiante,
            nombre_profesor=profesor,
            codigo_curso=curso
        )
    
    print(f"Se han creado {len(relaciones_profesor_curso)} relaciones entre profesores y cursos")
    print(f"Se han creado {len(aprobaciones)} relaciones de aprobaci√≥n")

def comprobar_conexion():
    """Comprueba la conexi√≥n con Neo4j"""
    try:
        driver = Neo4jDriver()
        result = driver.execute_read("RETURN 1 AS test")
        if result and result[0]["test"] == 1:
            print("Conexi√≥n a Neo4j exitosa! ‚úÖ")
            return True
        else:
            print("Error de conexi√≥n a Neo4j: respuesta inesperada")
            return False
    except Exception as e:
        print(f"Error de conexi√≥n a Neo4j: {e}")
        return False

def main():
    """Funci√≥n principal para inicializar la base de datos"""
    print("Iniciando proceso de inicializaci√≥n de base de datos...")
    
    # Comprobar conexi√≥n
    if not comprobar_conexion():
        print("üõë No se puede continuar sin conexi√≥n a Neo4j. Revisa la configuraci√≥n en .env")
        sys.exit(1)
    
    # Verificar si el usuario quiere limpiar la base de datos
    respuesta = input("¬øDeseas limpiar la base de datos antes de inicializarla? (s/n): ")
    if respuesta.lower() == 's':
        limpiar_base_datos()
    
    # Crear restricciones (para garantizar unicidad)
    crear_restricciones()
    
    # Inicializar datos
    crear_cursos()
    crear_estudiantes()
    crear_profesores()
    crear_relaciones()
    
    print("\nBase de datos inicializada correctamente! üéâ")
    print("\nPuedes ejecutar el API con el comando:")
    print("python src/main.py")
    print("\nLa documentaci√≥n estar√° disponible en http://localhost:8000/docs")

if __name__ == "__main__":
    main()